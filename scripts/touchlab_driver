#!/usr/bin/env python3
# Copyright (c) 2025 Touchlab Limited. All Rights Reserved
# Unauthorized copying or modifications of this file, via any medium is strictly prohibited.

import rospy
from touchlab_comm_py import TouchlabComms
from touchlab_msgs.msg import Float64MultiArrayStamped
from std_srvs.srv import Trigger, TriggerResponse
from threading import Thread
import time
import sys

class TouchlabDriver:
    def __init__(self):
        rospy.init_node('touchlab_driver', anonymous=True)

        self.port = rospy.get_param("~port", "")
        self.timeout = rospy.get_param("~timeout", 500)
        self.calibration = rospy.get_param("~calibration", "")
        if self.port == "":
            rospy.logerr("Port parameter is required")
            exit(1)
        if self.timeout < 0:
            rospy.loginfo("Timeout set to infinity")
            self.timeout = 0
        else:
            rospy.loginfo(f"Timeout set to {self.timeout*1e-3}s")
        if self.calibration == "":
            rospy.loginfo("No calibration file provided, only reading raw data!")
        else:
            rospy.loginfo(f"Calibration file: {self.calibration}")

        try:
            self.com = TouchlabComms()
            self.com.init(self.calibration)
            self.com.connect(self.port)
        except RuntimeError as e:
            rospy.logerr(f"{e}")
            exit(1)

        self.raw_pub = rospy.Publisher('~raw', Float64MultiArrayStamped, queue_size=10)
        self.cal_pub = rospy.Publisher('~calibrated', Float64MultiArrayStamped, queue_size=10)
        self.zero_srv = rospy.Service('~zero', Trigger, self.zero_callback)

        rospy.loginfo("Touchlab Driver Started")

    def zero_callback(self, request):
        """Service callback to zero the sensor."""
        rospy.loginfo("Zeroing the sensor")
        response = TriggerResponse()
        try:
            self.com.zero([])
            response.success = True
            response.message = "Sensor zeroed"
            rospy.loginfo("Sensor zeroed")
        except Exception as e:
            response.success = False
            response.message = f"Error: {e}"
            rospy.logerr(f"Error: {e}")
        return response

    def run(self):
        """Main loop for the driver."""
        raw_msg = Float64MultiArrayStamped()
        cal_msg = Float64MultiArrayStamped()
        rospy.loginfo("Zeroing the sensor")
        time.sleep(1.0)
        self.com.zero([])
        rospy.loginfo("Sensor zeroed")
        while not rospy.is_shutdown():
            try:
                data_raw = self.com.read_raw(self.timeout)
                data_cal = self.com.read(-1)
                if len(data_raw) == 0:
                    rospy.logerr("Sensor not responding, exiting...")
                    break
                raw_msg.header.stamp = rospy.Time.now()
                cal_msg.header.stamp = raw_msg.header.stamp
                raw_msg.multi_array.data = data_raw
                cal_msg.multi_array.data = data_cal

                self.raw_pub.publish(raw_msg)
                self.cal_pub.publish(cal_msg)
                if self.timeout == 0:
                    rospy.sleep(0.01)  # Prevent high CPU usage
            except KeyboardInterrupt:
                break
            except Exception as e:
                rospy.logerr(f"Error: {e}")
                break


def main():
    """Main entry point for the driver node."""
    driver = TouchlabDriver()
    driver.run()


if __name__ == "__main__":
    main()
